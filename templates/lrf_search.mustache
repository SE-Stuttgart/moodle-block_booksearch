{{!
    This file is part of Moodle - http://moodle.org/

    Moodle is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Moodle is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
}}
{{!
    @template block_booksearch/lrf_search

    Complex Lecture Search

    Example context (json):
    {
        "action": "https://moodle.local/admin/search.php",
        "cid": 0,
        "course_selector_param_name": "booksearchid",
        "search_term_param_name" : "search",
        "search_term_placeholder": "Search",
        "search_term_label": "Search Term:",
        "search_term": "test",
        "chapter_label": "chapter",
        "content": "[{\"content\":\"test\",\"filename\":\"test.pdf\",\"page\":1}]"
    }
}}
<div class="simplesearchform">
    {{^inform}}
    <form autocomplete="off" action="{{ action }}" method="get" accept-charset="utf-8" class="mform form-inline simplesearchform">
    {{/inform}}

    {{#cid}}<input type="hidden" name="{{course_selector_param_name}}" value="{{cid}}"></input>{{/cid}}

    <div class="input-group" style="margin: 5px; margin-right: 5rem">
        <label for="searchinput-{{uniqid}}">
            <span class="sr-only">{{{ search_term_placeholder }}}</span>
        </label>
        <input type="text"
           id="searchinput-{{uniqid}}"
           class="form-control"
           placeholder="{{ search_term_placeholder }}"
           aria-label="{{ search_term_placeholder }}"
           name="{{ search_term_param_name }}"
           data-region="input"
           autocomplete="off"
           oninput="lrfUpdateSearch()"
        >
        <div class="input-group-append">
            <button type="submit" class="btn {{^btnclass}}btn-submit{{/btnclass}} {{ btnclass }} search-icon">
                {{#pix}} a/search, core {{/pix}}
                <span class="sr-only">{{ search_term_param_name }}</span>
            </button>
        </div>
    </div>

    {{^inform}}
    </form>
    {{/inform}}


    <div>
        <hr>
        <h3 id="lrf-search-term-{{uniqid}}"> {{search_term_label}} {{search_term}} </h3>
        <hr>
        <div id="lrf-content-{{uniqid}}" style="max-height: 700px; overflow: auto;">
        </div>
    </div>

    <script type="text/javascript">
        var lrf_origin_content_json = '{{content}}';
        var lrf_origin_content = JSON.parse(atob(lrf_origin_content_json));

        var lrf_search_term = "{{search_term}}";
        var lrf_searched_content = [];

        var context_length = 5;

        lrfSearch();

        /**
        * Call to update the search
        * Gets new lrf_search_term and initiate the new search
        */
        function lrfUpdateSearch() {
            lrf_search_term = document.getElementById("searchinput-{{uniqid}}").value;
            lrfSearch();
        }

        /**
        * searches the lrf_origin_content using the new lrf_search_term
        */
        function lrfSearch() {
            lrf_searched_content = [];
            if (lrf_search_term) {
                lrf_origin_content.forEach(lrfSearchContent);
                lrfDisplayContent();
            } else {
                document.getElementById("lrf-search-term-{{uniqid}}").innerHTML = "{{search_term_label}}";
                document.getElementById("lrf-content-{{uniqid}}").innerHTML = '';
            }
        }

        /**
        * searches one section of pdf-page/book-chapter.
        * using the lrf_search_term and if found ads it with context to lrf_searched_content.
        * @param {*} section
        */
        function lrfSearchContent(section) {
            // Is the searched word in this section?
            if (!section.content.toLowerCase().includes(lrf_search_term.toLowerCase())) {
                return;
            }

            // Split the text into words.
            let words = section.content.split(/\s+/);

            let snippets = [];
            let snippetIndex = 0;
            
            // Iterate through the words to find occurrences of the search word.
            // Save the context snippet indices.
            for (let i = 0; i < words.length; i++) {
                if (words[i].toLowerCase().includes(lrf_search_term.toLowerCase())) {
                    // Calculate start and end indices for the context.
                    let start = Math.max(0, i - context_length);
                    let end = Math.min(words.length - 1, i + context_length);

                    if (snippetIndex > 0 && start - snippets[snippetIndex - 1][1] < context_length) {
                        snippets[snippetIndex - 1][1] = end;
                    } else {
                        snippets.push([start, end]);
                        snippetIndex++;
                    }
                }
            }

            // Turn the snippet indices into actual text snippets.
            for (let i = 0; i < snippets.length; i++) {
                let [start, end] = snippets[i];
                // Extract the context around the search word.
                let snippet = words.slice(start, end + 1).join(' ');

                // Add "..." at the beginning if not at the start of the text.
                if (start > 0) {
                    snippet = '...' + snippet;
                }

                // Add "..." at the end if not at the end of the text.
                if (end < words.length - 1) {
                    snippet += '...';
                }

                // Update snippet with text.
                snippets[i] = snippet;
            }
            
            // Create a string with all occurrences & context.
            let context = snippets.join(' ... ');
            section.context = context;
            
            // Create new file entry in results if it does not exist.
            if (!(section.filename in lrf_searched_content)) {
                lrf_searched_content[section.filename] = [];
            }

            // Set chapter entry as section or add section context to existing chapter entry.
            if (!(section.page in lrf_searched_content[section.filename])) {
                lrf_searched_content[section.filename][section.page] = section;
            } else {
                lrf_searched_content[section.filename][section.page].context += " ... " + section.context; 
            }
        }

        /**
        * displayes the lrf_searched_content in a list format
        */
        function lrfDisplayContent() {
            document.getElementById("lrf-search-term-{{uniqid}}").innerHTML = "{{search_term_label}}" + lrf_search_term;

            var display = '';
            for (var pdf_name in lrf_searched_content) {
                display += '<h4>' + pdf_name + '</h4>';
                display += '<ul style="max-height: 200px; overflow: auto;">';
                for (var chapter in lrf_searched_content[pdf_name]) {
                    display += '<li>' +
                        '<a href="' + lrf_searched_content[pdf_name][chapter].bookurl + '">' +
                        '{{chapter_label}}' + '-' + chapter +
                        '</a>: ' + lrf_searched_content[pdf_name][chapter].context +
                        '</li>';
                }
                display += '</ul>';
            }
            document.getElementById("lrf-content-{{uniqid}}").innerHTML = display;
        }
    </script>
</div>
